{"meta":{"title":"哈哈哈~","subtitle":"看看是啥","description":null,"author":"wuzhuang","url":"http://yoursite.com"},"pages":[{"title":"关于我","date":"2019-01-08T07:33:30.000Z","updated":"2019-01-08T07:35:17.238Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"我就是我"},{"title":"分类","date":"2019-01-06T10:37:56.000Z","updated":"2019-01-07T09:39:19.130Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-01-07T09:41:49.000Z","updated":"2019-01-07T09:43:19.230Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"欢迎留言","date":"2019-01-08T08:31:39.000Z","updated":"2019-01-08T08:36:31.036Z","comments":true,"path":"guestbook/index.html","permalink":"http://yoursite.com/guestbook/index.html","excerpt":"","text":""}],"posts":[{"title":"链表","slug":"链表","date":"2019-01-07T09:29:41.000Z","updated":"2019-01-08T09:01:03.312Z","comments":true,"path":"2019/01/07/链表/","link":"","permalink":"http://yoursite.com/2019/01/07/链表/","excerpt":"链表初探","text":"链表初探 链表的存储结构","categories":[{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/categories/数据结构/"},{"name":"链表","slug":"数据结构/链表","permalink":"http://yoursite.com/categories/数据结构/链表/"}],"tags":[{"name":"链表","slug":"链表","permalink":"http://yoursite.com/tags/链表/"}]},{"title":"数组","slug":"数组","date":"2019-01-07T09:29:05.000Z","updated":"2019-01-07T09:49:31.419Z","comments":true,"path":"2019/01/07/数组/","link":"","permalink":"http://yoursite.com/2019/01/07/数组/","excerpt":"","text":"","categories":[{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/categories/数据结构/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/tags/数据结构/"}]},{"title":"快速排序","slug":"快速排序","date":"2019-01-07T07:02:13.000Z","updated":"2019-01-07T07:10:09.055Z","comments":true,"path":"2019/01/07/快速排序/","link":"","permalink":"http://yoursite.com/2019/01/07/快速排序/","excerpt":"采用分治思想，平均时间复杂度为O(nlogn)，不稳定排序","text":"采用分治思想，平均时间复杂度为O(nlogn)，不稳定排序","categories":[{"name":"排序","slug":"排序","permalink":"http://yoursite.com/categories/排序/"}],"tags":[]},{"title":"归并排序","slug":"归并排序","date":"2019-01-07T07:01:55.000Z","updated":"2019-01-08T07:29:54.787Z","comments":true,"path":"2019/01/07/归并排序/","link":"","permalink":"http://yoursite.com/2019/01/07/归并排序/","excerpt":"采用分治思想，时间复杂度为O(nlogn)且稳定的排序,空间复杂度为O(n)，可以实现原地排序","text":"采用分治思想，时间复杂度为O(nlogn)且稳定的排序,空间复杂度为O(n)，可以实现原地排序 1234567891011121314151617181920212223242526272829303132333435363738394041424344public class MergeSort &#123; public static void mergeSort(int[] nums) &#123; mergeSortInner(nums, 0, nums.length - 1); &#125; //递归调用分解数组 public static void mergeSortInner(int[] nums, int l, int r) &#123; if (l &gt;= r) &#123; return; &#125; int q = l + (r - l) / 2; mergeSortInner(nums, l, q); mergeSortInner(nums, q + 1, r); merge(nums, l, q, r); &#125; //合并数组 public static void merge(int[] nums, int l, int q, int r) &#123; int i = l; int j = q + 1; int k = 0; int[] arr = new int[r - l + 1]; while (i &lt;= q &amp;&amp; j &lt;= r) &#123; if (nums[i] &lt;= nums[j]) &#123; arr[k++] = nums[i++]; &#125; else &#123; arr[k++] = nums[j++]; &#125; &#125; //将剩余的数拷贝到临时数组中 int start = i; int end = q; if (j &lt;= r) &#123; start = j; end = r; &#125; while (start &lt;= end) &#123; arr[k++] = nums[start++]; &#125; //将临时数组拷贝回原数组 for (i = 0; i &lt;= r - l; i++) &#123; nums[l+i] = arr[i]; &#125; &#125;&#125;","categories":[{"name":"排序","slug":"排序","permalink":"http://yoursite.com/categories/排序/"}],"tags":[{"name":"排序","slug":"排序","permalink":"http://yoursite.com/tags/排序/"}]},{"title":"三大简单排序","slug":"三大简单排序","date":"2019-01-06T10:16:11.000Z","updated":"2019-01-08T03:25:26.901Z","comments":true,"path":"2019/01/06/三大简单排序/","link":"","permalink":"http://yoursite.com/2019/01/06/三大简单排序/","excerpt":"三大简单排序：冒泡排序、插入排序、选择排序 平均时间复杂度均为O(n*n)","text":"三大简单排序：冒泡排序、插入排序、选择排序 平均时间复杂度均为O(n*n) 冒泡排序12345678910111213141516171819202122public class BubbleSort &#123; public static void bubbleSort(int[] nums) &#123; for(int i=0; i&lt;nums.length; i++) &#123; Boolean flag = true; for(int j=0; j&lt;nums.length-i-1; j++) &#123; if(nums[j] &gt; nums[j+1]) &#123; swap(nums, j, j+1); flag = false; &#125; &#125; if(flag) &#123; break; &#125; &#125; &#125; public static void swap(int[] nums, int i, int j) &#123; int temp = nums[i]; nums[i] = nums[j]; nums[j] = temp; &#125;&#125; 插入排序12345678910111213public static void insertSort(int[] nums) &#123; for(int i=1; i&lt;nums.length; i++) &#123; int value = nums[i]; int j=i-1; for(; j&gt;=0; j--) &#123; if(nums[j] &gt; value) &#123; nums[j+1] = nums[j]; &#125; else &#123; break; &#125; &#125; nums[j+1] = value; &#125; 选择排序1234567891011public static void selectSort(int[] nums) &#123; for(int i=0; i&lt;nums.length; i++) &#123; int min = i; for(int j=i; j&lt;nums.length; j++) &#123; if(nums[min] &gt; nums[j]) &#123; min = j; &#125; &#125; swap(nums, i, min); &#125; &#125;","categories":[{"name":"排序","slug":"排序","permalink":"http://yoursite.com/categories/排序/"}],"tags":[{"name":"sort","slug":"sort","permalink":"http://yoursite.com/tags/sort/"}]}]}