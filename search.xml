<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>队列</title>
      <link href="/2019/01/09/%E9%98%9F%E5%88%97/"/>
      <url>/2019/01/09/%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>栈</title>
      <link href="/2019/01/09/%E6%A0%88/"/>
      <url>/2019/01/09/%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<p>先进后出，后进先出是栈的特性，本文分别使用数组和链表来实现。</p><a id="more"></a><h3 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h3><p>用数组实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">    <span class="comment">//栈中元素个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="comment">//默认栈的容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> n = <span class="number">1024</span>;</span><br><span class="line">    <span class="keyword">private</span> Object[] stack = <span class="keyword">new</span> Object[n];</span><br><span class="line">    <span class="comment">//入栈</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">push</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(size &gt;= n) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        stack[size++] = value;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//出栈</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(size == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack[size--];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链式栈"><a href="#链式栈" class="headerlink" title="链式栈"></a>链式栈</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">    <span class="comment">//头结点</span></span><br><span class="line">    <span class="keyword">private</span> ListNode head = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//结点数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span> <span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">        ListNode newNode = <span class="keyword">new</span> ListNode(value);</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            head = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            newNode.next = head;</span><br><span class="line">            head = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">pop</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(size == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Object value = head.value;</span><br><span class="line">        head = head.next;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Object value;</span><br><span class="line">        <span class="keyword">private</span> ListNode next;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ListNode</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 链表 </category>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库原理</title>
      <link href="/2019/01/08/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86/"/>
      <url>/2019/01/08/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<ul><li>底层和上层数据库组件概况</li><li>查询优化过程概况</li><li>事务和缓冲池管理概况</li></ul><a id="more"></a><h3 id="回到基础"><a href="#回到基础" class="headerlink" title="回到基础"></a>回到基础</h3><p>很久很久以前（在一个遥远而又遥远的星系……)，开发者必须确切地知道他们的代码需要多少次运算。他们把算法和数据结构牢记于心，因为他们的计算机运行缓慢，无法承受对CPU和内存的浪费。</p><p>在这一部分，我将提醒大家一些这类的概念，因为它们对理解数据库至关重要。我还会介绍数据库索引的概念。</p><h5 id="O-1-vs-O-n-2"><a href="#O-1-vs-O-n-2" class="headerlink" title="O(1) vs O(n^2)"></a>O(1) vs O(n^2)</h5><p><strong>时间复杂度用来检验某个算法处理一定量的数据要花多长时间。</strong>为了描述这个复杂度，计算机科学家使用数学上的『<a href="http://blog.jobbole.com/55184/" target="_blank" rel="noopener">简明解释算法中的大O符号</a>』。这个表示法用一个函数来描述算法处理给定的数据需要多少次运算。</p><p>比如，当我说『这个算法是适用 O(某函数())』，我的意思是对于某些数据，这个算法需要 某函数(数据量) 次运算来完成。</p><p>重要的不是数据量，而是<strong>当数据量增加时运算如何增加</strong>。时间复杂度不会给出确切的运算次数，但是给出的是一种理念。</p><img src="/2019/01/08/数据库原理/complex.jpg"><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><p>数据量低时，O(1) 和 O(n^2)的区别可以忽略不计。比如，你有个算法要处理2000条元素。</p><ul><li>O(1) 算法会消耗 1 次运算</li><li>O(log(n)) 算法会消耗 7 次运算</li><li>O(n) 算法会消耗 2000 次运算</li><li>O(n*log(n)) 算法会消耗 14,000 次运算</li><li>O(n^2) 算法会消耗 4,000,000 次运算</li></ul><p>O(1) 和 O(n^2) 的区别似乎很大（4百万）,但你最多损失 2 毫秒，只是一眨眼的功夫。确实，当今处理器每秒可处理上亿次的运算。这就是为什么性能和优化在很多IT项目中不是问题。</p><p>但是面临海量数据的时候，了解这个概念依然很重要。如果这一次算法需要处理 1,000,000 条元素（这对数据库来说也不算大）。</p><ul><li>O(1) 算法会消耗 1 次运算</li><li>O(log(n)) 算法会消耗 14 次运算</li><li>O(n) 算法会消耗 1,000,000 次运算</li><li>O(n*log(n)) 算法会消耗 14,000,000 次运算</li><li>O(n^2) 算法会消耗 1,000,000,000,000 次运算</li></ul><h3 id="继续深入"><a href="#继续深入" class="headerlink" title="继续深入"></a>继续深入</h3><p>了解下数据库所用到的数据结构</p><ul><li><p>搜索一个均衡的树会得到 O(log(n)) 复杂度</p></li><li><p>搜索一个阵列会得到 O(n) 复杂度</p></li><li><p>最好的排序算法具有 O(n*log(n)) 复杂度</p></li><li><p>糟糕的排序算法具有 O(n^2) 复杂度</p></li></ul><h5 id="合并排序"><a href="#合并排序" class="headerlink" title="合并排序"></a>合并排序</h5><p>参考<a href="http://wwdan.com/2019/01/07/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/" target="_blank" rel="noopener">http://wwdan.com/2019/01/07/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</a></p><h5 id="阵列"><a href="#阵列" class="headerlink" title="阵列"></a>阵列</h5><p>二维阵列是最简单的数据结构。一个表可以看作是个阵列，比如：</p><img src="/2019/01/08/数据库原理/zhenlie.jpg"><ul><li>每个行代表一个主体</li><li>列用来描述主体的特征</li><li>每个列保存某一种类型对数据（整数、字符串、日期……）</li></ul><p>虽然用这个方法保存和视觉化数据很棒，但是当你要查找特定的值它就很糟糕了。 举个例子，<strong>如果你要找到所有在 UK 工作的人</strong>，你必须查看每一行以判断该行是否属于 UK 。<strong>这会造成 N 次运算的成本</strong>（N 等于行数），还不赖嘛，但是有没有更快的方法呢？这时候树就可以登场了（或开始起作用了）。</p><h5 id="树和数据库索引"><a href="#树和数据库索引" class="headerlink" title="树和数据库索引"></a>树和数据库索引</h5><p>二叉查找树是带有特殊属性的树，每个节点必须保证：</p><ul><li>比保存在左子树的任何值都要大</li><li>比保存在右子树的任何值都要小</li></ul><img src="/2019/01/08/数据库原理/bsearch.png"><p>这个树有 N=15 个元素。比方说我要找208：</p><ul><li>我从键值为 136 的根开始，因为 136&lt;208，我去找节点136的右子树。</li><li>398&gt;208，所以我去找节点398的左子树</li><li>250&gt;208，所以我去找节点250的左子树</li><li>200&lt;208，所以我去找节点200的右子树。但是 200 没有右子树，<strong>值不存在</strong>（因为如果存在，它会在 200 的右子树）</li></ul><p>现在比方说我要找40</p><ul><li>我从键值为136的根开始，因为 136&gt;40，所以我去找节点136的左子树。</li><li>80&gt;40，所以我去找节点 80 的左子树</li><li>40=40，节点存在。我抽取出节点内部行的ID（图中没有画）再去表中查找对应的 ROW ID。</li><li>知道 ROW ID我就知道了数据在表中对精确位置，就可以立即获取数据。</li></ul><p>时间复杂度为O(logN)</p><h5 id="B-树索引"><a href="#B-树索引" class="headerlink" title="B+树索引"></a>B+树索引</h5><p>查找一个特定值这个树挺好用，但是当你需要<strong>查找两个值之间的多个元素</strong>时，就会有<strong>大</strong>麻烦了。你的成本将是 O(N)，因为你必须查找树的每一个节点，以判断它是否处于那 2 个值之间（例如，对树使用中序遍历）。而且这个操作不是磁盘I/O有利的，因为你必须读取整个树。我们需要找到高效的<strong>范围查询</strong>方法。为了解决这个问题，现代数据库使用了一种修订版的树，叫做B+树。在一个B+树里：</p><ul><li>只有最底层的节点（叶子节点）才<strong>保存信息</strong>（相关表的行位置）</li><li>其它节点只是在<strong>搜索中</strong>用来<strong>指引</strong>到正确节点的。</li></ul><img src="/2019/01/08/数据库原理/B+Tree.png"><p>你可以看到，节点更多了（多了两倍）。确实，你有了额外的节点，它们就是帮助你找到正确节点的『决策节点』（正确节点保存着相关表中行的位置）。但是搜索复杂度还是在 O(log(N))（只多了一层）。一个重要的不同点是，最底层的节点是跟后续节点相连接的。</p><p>用这个 B+树，假设你要找40到100间的值：</p><ul><li>你只需要找 40（若40不存在则找40之后最贴近的值），就像你在上一个树中所做的那样。</li><li>然后用那些连接来收集40的后续节点，直到找到100。</li></ul><p>比方说你找到了 M 个后续节点，树总共有 N 个节点。对指定节点的搜索成本是 log(N)，跟上一个树相同。但是当你找到这个节点，你得通过后续节点的连接得到 M 个后续节点，这需要 M 次运算。<strong>那么这次搜索只消耗了 M+log(N)</strong> 次运算，区别于上一个树所用的 N 次运算。此外，你不需要读取整个树（仅需要读 M+log(N) 个节点）,这意味着更少的磁盘访问。如果 M 很小（比如 200 行）并且 N 很大（1,000,000），那结果就是天壤之别了。</p><h5 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h5><p>当你想快速查找值时，哈希表是非常有用的。而且，理解哈希表会帮助我们接下来理解一个数据库常见的联接操作，叫做『哈希联接』。这个数据结构也被数据库用来保存一些内部的东西（比如<strong>锁表</strong>或者<strong>缓冲池</strong>，我们在下文会研究这两个概念）。</p><p>哈希表这种数据结构可以用关键字来快速找到一个元素。为了构建一个哈希表，你需要定义：</p><ul><li><p>元素的关键字</p></li><li><p>关键字的<strong>哈希函数</strong>。关键字计算出来的哈希值给出了元素的位置（叫做哈希桶）。</p></li><li><p><strong>关键字比较函数</strong>。一旦你找到正确的哈希桶，你必须用比较函数在桶内找到你要的元素。</p></li></ul><img src="/2019/01/08/数据库原理/hash.jpg"><p><strong>如果有了好的哈希函数，在哈希表里搜索的时间复杂度是 O(1)。</strong></p><h3 id="全局概览"><a href="#全局概览" class="headerlink" title="全局概览"></a>全局概览</h3><p>我们已经了解了数据库内部的基本组件，现在我们需要回来看看数据库的全貌了。</p><p>数据库是一个易于访问和修改的信息集合。不过简单的一堆文件也能达到这个效果。事实上，像SQLite这样最简单的数据库也只是一堆文件而已，但SQLite是精心设计的一堆文件，因为它允许你：</p><ul><li>使用事务来确保数据的安全和一致性</li><li>快速处理百万条以上的数据</li></ul><img src="/2019/01/08/数据库原理/globalsql.jpg"><p>核心组件：</p><ul><li><strong>进程管理器（process manager）</strong>：很多数据库具备一个需要妥善管理的<strong>进程/线程池</strong>。再者，为了实现纳秒级操作，一些现代数据库使用自己的线程而不是操作系统线程。</li><li><strong>网络管理器（network manager）</strong>：网路I/O是个大问题，尤其是对于分布式数据库。所以一些数据库具备自己的网络管理器。</li><li><strong>文件系统管理器（File system manager）</strong>：<strong>磁盘I/O是数据库的首要瓶颈</strong>。具备一个文件系统管理器来完美地处理OS文件系统甚至取代OS文件系统，是非常重要的。</li><li><strong>内存管理器（memory manager）</strong>：为了避免磁盘I/O带来的性能损失，需要大量的内存。但是如果你要处理大容量内存你需要高效的内存管理器，尤其是你有很多查询同时使用内存的时候。</li><li><strong>安全管理器（Security Manager）</strong>：用于对用户的验证和授权。</li><li><strong>客户端管理器（Client manager）</strong>：用于管理客户端连接。</li><li>……</li></ul><p>工具：</p><ul><li><strong>备份管理器（Backup manager）</strong>：用于保存和恢复数据。</li><li><strong>复原管理器（Recovery manager）</strong>：用于崩溃后重启数据库到一个<strong>一致状态</strong>。</li><li><strong>监控管理器（Monitor manager）</strong>：用于记录数据库活动信息和提供监控数据库的工具。</li><li><strong>Administration管理器（Administration manager）</strong>：用于保存元数据（比如表的名称和结构），提供管理数据库、模式、表空间的工具。<em>【译者注：好吧，我真的不知道Administration manager该翻译成什么，有知道的麻烦告知，不胜感激……】</em></li><li>……</li></ul><p>查询管理器：</p><ul><li><strong>查询解析器（Query parser）</strong>：用于检查查询是否合法</li><li><strong>查询重写器（Query rewriter）</strong>：用于预优化查询</li><li><strong>查询优化器（Query optimizer）</strong>：用于优化查询</li><li><strong>查询执行器（Query executor）</strong>：用于编译和执行查询</li></ul><p>数据管理器：</p><ul><li><strong>事务管理器（Transaction manager）</strong>：用于处理事务</li><li><strong>缓存管理器（Cache manager）</strong>：数据被使用之前置于内存，或者数据写入磁盘之前置于内存</li><li><strong>数据访问管理器（Data access manager）</strong>：访问磁盘中的数据</li></ul><h4 id="客户端管理器"><a href="#客户端管理器" class="headerlink" title="客户端管理器"></a>客户端管理器</h4><img src="/2019/01/08/数据库原理/clientsql.jpg"><p>客户端管理器是处理客户端通信的。客户端可以是一个（网站）服务器或者一个最终用户或最终应用。客户端管理器通过一系列知名的API（JDBC, ODBC, OLE-DB …）提供不同的方式来访问数据库。</p><p>客户端管理器也提供专有的数据库访问API。</p><p>当你连接到数据库时：</p><ul><li>管理器首先检查你的<strong>验证信息</strong>（用户名和密码），然后检查你是否有访问数据库的<strong>授权</strong>。</li><li>然后，管理器检查是否有空闲进程（或线程）来处理你对查询。</li><li>管理器还会检查数据库是否负载很重。</li><li>管理器可能会等待一会儿来获取需要的资源。如果等待时间达到超时时间，它会关闭连接并给出一个可读的错误信息。</li><li>然后管理器会<strong>把你的查询送给查询管理器</strong>来处理。</li><li>因为查询处理进程不是不全则无的，一旦它从查询管理器得到数据，它会<strong>把部分结果保存到一个缓冲区并且开始给你发送</strong>。</li><li>如果遇到问题，管理器关闭连接，向你发送可读的解释信息，然后释放资源。</li></ul><h4 id="查询管理器"><a href="#查询管理器" class="headerlink" title="查询管理器"></a>查询管理器</h4><img src="/2019/01/08/数据库原理/querysql.jpg"><p>在这部分里，一个写得糟糕的查询可以转换成一个快速执行的代码，代码执行的结果被送到客户端管理器。这个多步骤操作过程如下：</p><ul><li>查询首先被<strong>解析</strong>并判断是否合法</li><li>然后被<strong>重写</strong>，去除了无用的操作并且加入预优化部分</li><li>接着被<strong>优化</strong>以便提升性能，并被转换为可执行代码和数据访问计划。</li><li>然后计划被<strong>编译</strong></li><li>最后，被<strong>执行</strong></li></ul><h5 id="查询解析器"><a href="#查询解析器" class="headerlink" title="查询解析器"></a>查询解析器</h5><p>每一条SQL语句都要送到解析器来检查语法，如果你的查询有错，解析器将拒绝该查询。比如，如果你写成”SLECT …” 而不是 “SELECT …”，那就没有下文了。</p><p>但这还不算完，解析器还会检查关键字是否使用正确的顺序，比如 WHERE 写在 SELECT 之前会被拒绝。</p><p>然后，解析器要分析查询中的表和字段，使用数据库元数据来检查：</p><ul><li>表是否存在</li><li>表的字段是否存在</li><li>对某类型字段的运算是否可能（比如，你不能将整数和字符串进行比较，你不能对一个整数使用 substring() 函数）</li></ul><p>接着，解析器检查在查询中你是否有权限来读取（或写入）表。</p><p>在解析过程中，SQL 查询被转换为内部表示（通常是一个树）。</p><p>如果一切正常，内部表示被送到查询重写器。</p><h5 id="查询重写器"><a href="#查询重写器" class="headerlink" title="查询重写器"></a>查询重写器</h5><ul><li>预优化查询</li><li>避免不必要的运算</li><li>帮助优化器找到合理的最佳解决方案</li></ul><p>重写器按照一系列已知的规则对查询执行检测。如果查询匹配一种模式的规则，查询就会按照这条规则来重写。下面是（可选）规则的非详尽的列表：</p><ul><li>视图合并：如果你在查询中使用视图，视图就会转换为它的 SQL 代码。</li><li>子查询扁平化：子查询是很难优化的，因此重写器会尝试移除子查询</li><li>去除不必要的运算符：比如，如果你用了 DISTINCT，而其实你有 UNIQUE 约束（这本身就防止了数据出现重复），那么 DISTINCT 关键字就被去掉了。</li><li>排除冗余的联接：如果相同的 JOIN 条件出现两次，比如隐藏在视图中的 JOIN 条件，或者由于传递性产生的无用 JOIN，都会被消除。</li><li>常数计算赋值：如果你的查询需要计算，那么在重写过程中计算会执行一次。比如 WHERE AGE &gt; 10+2 会转换为 WHERE AGE &gt; 12 ， TODATE(“日期字符串”) 会转换为 datetime 格式的日期值。</li></ul><h5 id="查询优化器"><a href="#查询优化器" class="headerlink" title="查询优化器"></a>查询优化器</h5><p>大多数时候瓶颈都在磁盘IO不在CPU上。</p><p><strong>存取路径</strong></p><p>在应用联接运算符之前，你首先需要获得数据。以下就是获得数据的方法</p><ul><li><p>全扫描： 如果你读过执行计划，一定看到过『全扫描』（或只是『扫描』）一词。简单的说全扫描就是数据库完整的读一个表或索引。就磁盘 I/O 而言，很明显全表扫描的成本比索引全扫描要高昂。</p></li><li><p>范围扫描：其他类型的扫描有索引范围扫描，比如当你使用谓词 ” WHERE AGE &gt; 20 AND AGE &lt; 40 ” 的时候它就会发生。当然，你需要在 AGE 字段上有索引才能用到索引范围扫描。范围查询的时间成本大约是 log(N)+M，这里 N 是索引的数据量，M 是范围内估测的行数。</p></li><li><p>唯一扫描：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT LASTNAME, FIRSTNAME from PERSON WHERE AGE = 28</span><br></pre></td></tr></table></figure><p>如果 person 表的 age 列有索引，优化器会使用索引找到所有年龄为 28 的人，然后它会去表中读取相关的行，这是因为索引中只有 age 的信息而你要的是姓和名。</p></li></ul><h5 id="查询执行器"><a href="#查询执行器" class="headerlink" title="查询执行器"></a>查询执行器</h5><p>在这个阶段，我们有了一个优化的执行计划，再编译为可执行代码。然后，如果有足够资源（内存，CPU），查询执行器就会执行它。计划中的操作符 (JOIN, SORT BY …) 可以顺序或并行执行，这取决于执行器。为了获得和写入数据，查询执行器与数据管理器交互，本文下一部分来讨论数据管理器。</p><h4 id="数据管理器"><a href="#数据管理器" class="headerlink" title="数据管理器"></a>数据管理器</h4><img src="/2019/01/08/数据库原理/datamanage.jpg"><p>在这一步，查询管理器执行了查询，需要从表和索引获取数据，于是向数据管理器提出请求。但是有 2 个问题：</p><ul><li>关系型数据库使用事务模型，所以，当其他人在同一时刻使用或修改数据时，你无法得到这部分数据。</li><li>数据提取是数据库中速度最慢的操作，所以数据管理器需要足够聪明地获得数据并保存在内存缓冲区内。</li></ul><h4 id="缓存管理器"><a href="#缓存管理器" class="headerlink" title="缓存管理器"></a>缓存管理器</h4><img src="/2019/01/08/数据库原理/cachemanage.jpg"><p>查询执行器不会直接从文件系统拿数据，而是向缓存管理器要。缓存管理器有一个内存缓存区，叫做缓冲池<strong>，</strong>从内存读取数据显著地提升数据库性能。然而，这导致了另一个问题（数据库总是这样…)，缓存管理器需要在查询执行器使用数据<strong>之前</strong>得到数据，否则查询管理器不得不等待数据从缓慢的磁盘中读出来。</p><p>这个问题叫预读。查询执行器知道它将需要什么数据，因为它了解整个查询流，而且通过统计也了解磁盘上的数据。道理是这样的：</p><ul><li>当查询执行器处理它的第一批数据时</li><li>会告诉缓存管理器预先装载第二批数据</li><li>当开始处理第二批数据时</li><li>告诉缓存管理器预先装载第三批数据，并且告诉缓存管理器第一批可以从缓存里清掉了。</li><li>……</li></ul><p>缓存管理器在缓冲池里保存所有的这些数据。为了确定一条数据是否有用，缓存管理器给缓存的数据添加了额外的信息。</p><p>有时查询执行器不知道它需要什么数据，有的数据库也不提供这个功能。相反，它们使用一种推测预读法（比如：如果查询执行器想要数据1、3、5，它不久后很可能会要 7、9、11），或者顺序预读法（这时候缓存管理器只是读取一批数据后简单地从磁盘加载下一批连续数据）。</p><p>为了监控预读的工作状况，现代数据库引入了一个度量叫缓冲/缓存命中率，用来显示请求的数据在缓存中找到而不是从磁盘读取的频率。</p><p>缓存只是容量有限的内存空间，因此，为了加载新的数据，它需要移除一些数据。加载和清除缓存需要一些磁盘和网络I/O的成本。如果你有个经常执行的查询，那么每次都把查询结果加载然后清除，效率就太低了。现代数据库用缓冲区置换策略来解决这个问题。</p><p><strong>LRU</strong></p><p><strong>LRU</strong>代表最近最少使用（<strong>L</strong>east <strong>R</strong>ecently <strong>U</strong>sed）算法，背后的原理是：在缓存里保留的数据是最近使用的，所以更有可能再次使用。</p><h4 id="事务管理器"><a href="#事务管理器" class="headerlink" title="事务管理器"></a>事务管理器</h4><p>一个ACID事务是一个<strong>工作单元</strong>，它要保证4个属性：</p><ul><li><strong>原子性</strong>（<strong>A</strong>tomicity）: 事务『要么全部完成，要么全部取消』，即使它持续运行10个小时。如果事务崩溃，状态回到事务之前（事务回滚）。</li><li><strong>隔离性</strong>（<strong>I</strong>solation）: 如果2个事务 A 和 B 同时运行，事务 A 和 B 最终的结果是相同的，不管 A 是结束于 B 之前/之后/运行期间。</li><li><strong>持久性</strong>（<strong>D</strong>urability）: 一旦事务<strong>提交</strong>（也就是成功执行）,不管发生什么（崩溃或者出错），数据要保存在数据库中。</li><li><strong>一致性</strong>（<strong>C</strong>onsistency）: 只有合法的数据（依照关系约束和函数约束）能写入数据库，一致性与原子性和隔离性有关。</li></ul><p>在同一个事务内，你可以运行多个SQL查询来读取、创建、更新和删除数据。当两个事务使用相同的数据，麻烦就来了。经典的例子是从账户A到账户B的汇款。假设有2个事务：</p><ul><li>事务1（T1）从账户A取出100美元给账户B</li><li>事务2（T2）从账户A取出50美元给账户B</li></ul><p>我们回来看看<strong>ACID</strong>属性：</p><ul><li><strong>原子性</strong>确保不管 T1 期间发生什么（服务器崩溃、网络中断…），你不能出现账户A 取走了100美元但没有给账户B 的现象（这就是数据不一致状态）。</li><li><strong>隔离性</strong>确保如果 T1 和 T2 同时发生，最终A将减少150美元，B将得到150美元，而不是其他结果，比如因为 T2 部分抹除了 T1 的行为，A减少150美元而B只得到50美元（这也是不一致状态）。</li><li><strong>持久性</strong>确保如果 T1 刚刚提交，数据库就发生崩溃，T1 不会消失得无影无踪。</li><li><strong>一致性</strong>确保钱不会在系统内生成或灭失。</li></ul><p>现代数据库不会使用纯粹的隔离作为默认模式，因为它会带来巨大的性能消耗。SQL一般定义4个隔离级别：</p><ul><li><strong>串行化</strong>(Serializable，SQLite默认模式）：最高级别的隔离。两个同时发生的事务100%隔离，每个事务有自己的『世界』。</li><li><strong>可重复读</strong>（Repeatable read，MySQL默认模式）：每个事务有自己的『世界』，除了一种情况。如果一个事务成功执行并且添加了新数据，这些数据对其他正在执行的事务是可见的。但是如果事务成功修改了一条数据，修改结果对正在运行的事务不可见。所以，事务之间只是在新数据方面突破了隔离，对已存在的数据仍旧隔离。<br>举个例子，如果事务A运行”SELECT count(1) from TABLE_X” ，然后事务B在 TABLE_X 加入一条新数据并提交，当事务A再运行一次 count(1)结果不会是一样的。<br>这叫<strong>幻读</strong>（phantom read）。</li><li><strong>读取已提交</strong>（Read committed，Oracle、PostgreSQL、SQL Server默认模式）：可重复读+新的隔离突破。如果事务A读取了数据D，然后数据D被事务B修改（或删除）并提交，事务A再次读取数据D时数据的变化（或删除）是可见的。<br>这叫<strong>不可重复读</strong>（non-repeatable read）。</li><li><strong>读取未提交</strong>（Read uncommitted）：最低级别的隔离，是读取已提交+新的隔离突破。如果事务A读取了数据D，然后数据D被事务B修改（但并未提交，事务B仍在运行中），事务A再次读取数据D时，数据修改是可见的。如果事务B回滚，那么事务A第二次读取的数据D是无意义的，因为那是事务B所做的从未发生的修改（已经回滚了嘛）。<br>这叫<strong>脏读</strong>（dirty read）。</li></ul><h5 id="并发控制"><a href="#并发控制" class="headerlink" title="并发控制"></a>并发控制</h5><p>确保隔离性、一致性和原子性的真正问题是<strong>对相同数据的写操作</strong>（增、更、删）：</p><ul><li>如果所有事务只是读取数据，它们可以同时工作，不会更改另一个事务的行为。</li><li>如果（至少）有一个事务在修改其他事务读取的数据，数据库需要找个办法对其它事务隐藏这种修改。而且，它还需要确保这个修改操作不会被另一个看不到这些数据修改的事务擦除。</li></ul><p>这个问题叫<strong>并发控制</strong>。</p><p>最简单的解决办法是依次执行每个事务（即顺序执行），但这样就完全没有伸缩性了，在一个多处理器/多核服务器上只有一个核心在工作，效率很低。</p><p>理想的办法是，每次一个事务创建或取消时：</p><ul><li>监控所有事务的所有操作</li><li>检查是否2个（或更多）事务的部分操作因为读取/修改相同的数据而存在冲突</li><li>重新编排冲突事务中的操作来减少冲突的部分</li><li>按照一定的顺序执行冲突的部分（同时非冲突事务仍然在并发运行）</li><li>考虑事务有可能被取消</li></ul><p>用更正规的说法，这是对冲突的调度问题。更具体点儿说，这是个非常困难而且CPU开销很大的优化问题。企业级数据库无法承担等待几个小时，来寻找每个新事务活动最好的调度，因此就使用不那么理想的方式以避免更多的时间浪费在解决冲突上。</p><h4 id="锁管理器"><a href="#锁管理器" class="headerlink" title="锁管理器"></a>锁管理器</h4><p>为了解决这个问题，多数数据库使用<strong>锁</strong>和/或<strong>数据版本控制</strong>。</p><p><strong>悲观锁</strong></p><p>原理是：</p><ul><li>如果一个事务需要一条数据</li><li>它就把数据锁住</li><li>如果另一个事务也需要这条数据</li><li>它就必须要等第一个事务释放这条数据<br>这个锁叫排他锁。</li></ul><p>但是对一个仅仅读取数据的事务使用排他锁非常昂贵，因为这会迫使其它只需要读取相同数据的事务等待。因此就有了另一种锁，共享锁。</p><p>共享锁是这样的：</p><ul><li>如果一个事务只需要读取数据A</li><li>它会给数据A加上『共享锁』并读取</li><li>如果第二个事务也需要仅仅读取数据A</li><li>它会给数据A加上『共享锁』并读取</li><li>如果第三个事务需要修改数据A</li><li>它会给数据A加上『排他锁』，但是必须等待另外两个事务释放它们的共享锁。</li></ul><p>同样的，如果一块数据被加上排他锁，一个只需要读取该数据的事务必须等待排他锁释放才能给该数据加上共享锁。</p><img src="/2019/01/08/数据库原理/transaction.jpg"><p>锁管理器是添加和释放锁的进程，在内部用一个哈希表保存锁信息（关键字是被锁的数据），并且了解每一块数据是：</p><ul><li>被哪个事务加的锁</li><li>哪个事务在等待数据解锁</li></ul><p><strong>死锁</strong></p><p>但是使用锁会导致一种情况，2个事务永远在等待一块数据：</p><img src="/2019/01/08/数据库原理/deadlock.jpg"><p>在本图中：</p><ul><li>事务A 给 数据1 加上排他锁并且等待获取数据2</li><li>事务B 给 数据2 加上排他锁并且等待获取数据1</li></ul><p>在死锁发生时，锁管理器要选择取消（回滚）一个事务，以便消除死锁。这可是个艰难的决定：</p><ul><li>杀死数据修改量最少的事务（这样能减少回滚的成本）？</li><li>杀死持续时间最短的事务，因为其它事务的用户等的时间更长？</li><li>杀死能用更少时间结束的事务（避免可能的资源饥荒）？</li><li>一旦发生回滚，有多少事务会受到回滚的影响？</li></ul><p>InnoDB提供了一个机制，在两个事务相互等待时，当一个等待时间超过设置的某一阀值时，对其中一个事务进行回滚，另一个事务就能继续执行。这种方法简单有效，在innodb中，参数innodb_lock_wait_timeout用来设置超时时间。</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表</title>
      <link href="/2019/01/07/%E9%93%BE%E8%A1%A8/"/>
      <url>/2019/01/07/%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>链表初探</p><a id="more"></a><h5 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h5><img src="/2019/01/07/链表/list.jpg"><p>链表通过指针将一组零散的内存块串联在一起。其中，内存块称为链表的结点。为了将所有的结点串联起来，每个链表的结点除了存储数据之外，还需要记录链上的下一个结点的地址。</p><img src="/2019/01/07/链表/list2.jpg"><p>我们习惯把第一个结点叫做头结点，把最后一个结点叫做尾结点。其中，头结点用来记录链表的基地址。有了它，我们就可以遍历得到整条链表。而尾结点特殊的地方是：指针不是指向下一个结点，而是指向一个空地址NULL，表示这是链表上最后一个结点。</p><img src="/2019/01/07/链表/list3.jpg"><p>但是，链表要随机访问第K个元素，就没有数组那么高效了。链表需要根据指针一个结点一个结点地依次遍历按，直到找到相应的结点，时间复杂度为O(n)。</p><h5 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h5><p>循环链表和单链表的区别在尾结点，其尾结点的指针是指向链表的头结点。</p><img src="/2019/01/07/链表/list4.jpg"><h5 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h5><p>双向链表每个结点有一个指向前面结点的指针prev和指向后面结点的指针next。</p><img src="/2019/01/07/链表/list5.jpg"><p>从结构上看，双向链表可以支持O(1)时间复杂度的情况下找到前驱结点，正是这样的特点，也使双向链表在某些情况下的插入、删除等操作比单链表简单、高效。<br>链表删除无外乎两种情况：</p><ul><li>删除结点种值等于某个给定值的结点</li><li>删除给定指针指向的结点<br>对于第一种情况，需要遍历链表找到和给定值相等的结点，时间复杂度是O(n)<br>对于第二种情况，已经知道给定结点的指针，删除需要知道前指针prev，单链表需要遍历，而双向链表不需要。<br>同理，插入也是一样。</li></ul><h5 id="常见链表问题"><a href="#常见链表问题" class="headerlink" title="常见链表问题"></a>常见链表问题</h5><ul><li>单链表反转</li><li>链表中环的检测</li><li>两个有序链表合并</li><li>删除链表倒数第n个结点</li><li>求链表的中间结点</li></ul><p>对应leetcode中的题号依次为：206、141、21、19、876</p>]]></content>
      
      
      <categories>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组</title>
      <link href="/2019/01/07/%E6%95%B0%E7%BB%84/"/>
      <url>/2019/01/07/%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速排序</title>
      <link href="/2019/01/07/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
      <url>/2019/01/07/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>采用分治思想，平均时间复杂度为O(nlogn)，不稳定排序</p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> 排序 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>归并排序</title>
      <link href="/2019/01/07/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
      <url>/2019/01/07/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>采用分治思想，时间复杂度为O(nlogn)且稳定的排序,空间复杂度为O(n)，可以实现原地排序</p><a id="more"></a><img src="/2019/01/07/归并排序/merge_sort.jpg"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        mergeSortInner(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//递归调用分解数组</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSortInner</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= r) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> q = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">        mergeSortInner(nums, l, q);</span><br><span class="line">        mergeSortInner(nums, q + <span class="number">1</span>, r);</span><br><span class="line">        merge(nums, l, q, r);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//合并数组</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> l, <span class="keyword">int</span> q, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = l;</span><br><span class="line">        <span class="keyword">int</span> j = q + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[r - l + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= q &amp;&amp; j &lt;= r) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &lt;= nums[j]) &#123;</span><br><span class="line">                arr[k++] = nums[i++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                arr[k++] = nums[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将剩余的数拷贝到临时数组中</span></span><br><span class="line">        <span class="keyword">int</span> start = i;</span><br><span class="line">        <span class="keyword">int</span> end = q;</span><br><span class="line">        <span class="keyword">if</span> (j &lt;= r) &#123;</span><br><span class="line">            start = j;</span><br><span class="line">            end = r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (start &lt;= end) &#123;</span><br><span class="line">            arr[k++] = nums[start++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将临时数组拷贝回原数组</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= r - l; i++) &#123;</span><br><span class="line">            nums[l+i] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三大简单排序</title>
      <link href="/2019/01/06/%E4%B8%89%E5%A4%A7%E7%AE%80%E5%8D%95%E6%8E%92%E5%BA%8F/"/>
      <url>/2019/01/06/%E4%B8%89%E5%A4%A7%E7%AE%80%E5%8D%95%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>三大简单排序：冒泡排序、插入排序、选择排序  平均时间复杂度均为O(n*n)</p><a id="more"></a><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++) &#123;</span><br><span class="line">            Boolean flag = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nums.length-i-<span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[j] &gt; nums[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                    swap(nums, j, j+<span class="number">1</span>);</span><br><span class="line">                    flag = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;nums.length; i++) &#123;</span><br><span class="line">           <span class="keyword">int</span> value = nums[i];</span><br><span class="line">           <span class="keyword">int</span> j=i-<span class="number">1</span>;</span><br><span class="line">           <span class="keyword">for</span>(; j&gt;=<span class="number">0</span>; j--) &#123;</span><br><span class="line">               <span class="keyword">if</span>(nums[j] &gt; value) &#123;</span><br><span class="line">                   nums[j+<span class="number">1</span>] = nums[j];</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           nums[j+<span class="number">1</span>] = value;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++) &#123;</span><br><span class="line">         <span class="keyword">int</span> min = i;</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> j=i; j&lt;nums.length; j++) &#123;</span><br><span class="line">             <span class="keyword">if</span>(nums[min] &gt; nums[j]) &#123;</span><br><span class="line">                 min = j;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         swap(nums, i, min);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sort </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
